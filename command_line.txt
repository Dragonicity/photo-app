CREATE APPLICATION

rails new app-name
rails generate controller welcome index
Change get 'welcome/index' to root 'welcome#index' in routes.rb

start rails server and confirm home page shows

git init
git add -A
git commit -m "Initial commit with home page"

Deploy to Production:

In gemfile move sqlite3 gem to development group and create production group:

group :production do
  gem 'pg'
  gem 'rails_12factor'
end

bundle install --without production

create github repository for app-name

git remote add origin https://github.com/Dragonicity/photo-app.git
git push -u origin master

heroku create
heroku rename required-name

git add -A
git commit -m "Make ready for production"
git push
git push heroku master

BUILD AUTHENTICATION SYSTEM

add gems to gemfile

gem 'devise'
gem 'twitter-bootstrap-rails'
gem 'devise-bootstrap-views'

bundle install

rails generate devise:install
rails generate devise User

update migration file to allow for confirmable email authentication

uncomment confirmable attributes in database migration file

## Confirmable
      t.string   :confirmation_token
      t.datetime :confirmed_at
      t.datetime :confirmation_sent_at
      t.string   :unconfirmed_email # Only if using reconfirmable

add confirmable option to User model:

class User < ActiveRecord::Base
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable and :omniauthable
  devise :database_authenticatable, :registerable, :confirmable,
         :recoverable, :rememberable, :trackable, :validatable
end

rake db:migrate

restart rails server

add line to application controller:

before_action :authenticate_user!

add line to welcome controller to skip authentication if needed

skip_before_action :authenticate_user!, only: [:index]

ADD BOOTSTRAP

rails generate bootstrap:install static
rails generate bootstrap:layout application (and confirm with Y)
rails generate devise:views:locale en
rails generate devise:views:bootstrap_templates

In the application.css file under app/assets/stylesheets folder, right above the line that says *= require_tree add in the following line:

*= require devise_bootstrap_views

go to sign_up page

http://localhost:3000/users/sign_up

git add -A
git commit -m "Add devise and styling"
git push

PPRODUCTION EMAIL

heroku addons:create sendgrid:starter

Click on Sendgrid add-on in Heroku, go to settings, credentials and add username and password for account. Click Mail checkbox and click create credential button.

heroku config:set SENDGRID_USERNAME=mark.nelson@dragonicity.com
heroku config:set SENDGRID_PASSWORD=password

ENter the following in the ~/.zshrc file:

export SENDGRID_USERNAME=mark.nelson@dragonicity.com
export SENDGRID_PASSWORD=password

Create new terminal session to see environment variables and do set-up

In config/environment.rb add the following code:

ActionMailer::Base.smtp_settings = {
  :address => 'smtp.sendgrid.net',
  :port => '587',
  :authentication => :plain,
  :user_name => ENV['SENDGRID_USERNAME'],
  :password => ENV['SENDGRID_PASSWORD'],
  :domain => 'heroku.com',
  :enable_starttls_auto => true
}

In config/environments/develop.rb add the following (under config.eager_load = false):

config.action_mailer.delivery_method = :test
config.action_mailer.default_url_options = { :host => 'http://localhost:3000' }

In config/environments/production.rb add the following:

config.action_mailer.delivery_method = :smtp
config.action_mailer.default_url_options = { :host => 'dragon-photo-app.herokuapp.com', :protocol => 'htpps' }

Sign-up to the application (should see message that email send to activate your account).

If you get undefined local variable or method 'confirmed_at' for Devise error then reset datbase with:

rake db:migrate:reset
rake db:reset

Select confirmation link from email details in server log and paste into browser

http://localhost:3000/users/confirmation?confirmation_token=cMp2szSz2kAmci4QdayS&amp;locale=en

You should see flash message Your account was successfully confirmed.

LOGIN AND LOGOUT

In app/views/layouts.application.html.erb remove sidebar and then paste following text below links </ul>:

<ul class="nav navbar-right col-md-4">
<% if current_user %>
  <li class="col-md-8 user-name">
  <%= link_to ('<i class="fa fa-user"></i> ' + truncate(current_user.email, length: 25)).html_safe, edit_user_registration_path, title: 'Edit Profile' %>
  </li>
  <li class="col-md-1"> </li>
  <li class="col-md-3 logout"><%= link_to('Logout', destroy_user_session_path,
    class: 'btn btn-xs btn-danger', title: 'Logout', :method => :delete) %></li>
<% else %>
  <li class="col-md-4 pull-right">
    <%= link_to('Sign In', new_user_session_path, class: 'btn btn-primary', title: 'Sign In') %>
  </li>
<% end %>
</ul>

Change config/initializers/devise.rb:

config.mailer_sender = 'please-change-me-at-config-initializers-devise@example.com'

to e.g. admin@dragonicity.com

Test login and logout in development:

git add -A
git commit -m "Set-up email funcitonality for sign-up"
git push
git push heroku master
heroku run rake db:migrate

Test sign-up process and email in production:

heroku logs if error
heroku config shows heroku environment variables
(heroku run printenv will show all environment variables on heroku)

Open your index.html.erb page under app/views/welcome folder and fill in the code 
(or add styling as you like):

<% if current_user %>
  <h3>Welcome: <%= current_user.email %></h3>
<% else %>
  <div class="jumbotron"> 
    <h2>Welcome to the Photo Management App!</h2>
    <p class="lead">You'll love managing your Photos with our application. Sign up!
    </p>
  </div>
  <div class="row">
    <div class="plans clearfix">
      <div class="col-lg-3 col-lg-offset-3 plan">
        <h2>Premium Plan</h2>
        <div class="price pull-right">Price: $10
        </div>
        <div class="features">
          <ul>
            <li>Unlimited Image Uploads</li>
            <li>Responsive design</li>
            <li>Access anywhere</li>
          </ul>
        </div>
        <p>
        <%= link_to 'Sign Up', new_user_registration_path, class: 'btn btn-primary sign-up' %>
        </p>
      </div>
      <div class="col-lg-3 plan">
        <h2>Amaze Plan</h2>
        <div class="price pull-right">Price: $20
        </div>
        <div class="features">
          <ul>
            <li>Unlimited Image Uploads</li>
            <li>Responsive design</li>
            <li>Access anywhere</li>
            <li class='extra'>Unlimited projects</li>
          </ul>
        </div>
        <p>
        <%= link_to 'Sign Up', new_user_registration_path, class: 'btn btn-primary sign-up' %>
        </p>
      </div>
    </div>
  </div>
<% end %>

Then open your custom.css.scss file under app/assets/stylesheets folder and add the following to the bottom of the file, note: the file name in the asset-url for background-image below needs to be the name of the image file you upload to your app/assets/images folder:

.features {
  ul {
    margin-left: 0;
    padding-left: 15px;
  }
}

.jumbotron {
  text-align: center;
  background-image: asset-url('carousel.jpg');
  background-size: cover;
  color: #fff;
  font-family: 'Helvetica Neue' !important;
  font-stretch: expanded;
  padding-top: 25px;
  padding-bottom: 25px;
  margin-left: 15px;
  margin-right: 15px;
  text-shadow: -1px 0 #555, 0 1px #555, 1px 0 #555, 0 -1px #555;
/*

  h2 {
    font-size: 35px !important;
    .lead {
      font-family: 'Helvetica Neue' !important;
      font-size: 30px !important;
    }
  } */
}

.no-left-padding {
  padding-left: 0 !important;
}

.listing { 
  list-style: none;
  padding-left: 0;
}

In the application.html.erb page under app/views/layouts folder, change the following to col-lg-12 from col-lg-9:

<div class="container">
      <div class="row">
        <div class="col-lg-12">
          <%= bootstrap_flash %>
          <%= yield %>

PAYMENT INTEGRATION

Go to stripe.com and sign-up for an account

add stripe gem: gem 'stripe'
bundle install

In config/initializers create a new file called stripe.rb and include the following code:


Rails.configuration.stripe = {
  :publishable_key => ENV['STRIPE_TEST_PUBLISHABLE_KEY'],
  :secret_key      => ENV['STRIPE_TEST_SECRET_KEY']
}

Stripe.api_key = Rails.configuration.stripe[:secret_key]

Add key environment variables to bash_resource file:

export STRIPE_TEST_SECRET_KEY=sk_test_hh22z9yzFJPzBSVDwF6VMJZp
export STRIPE_TEST_PUBLISHABLE_KEY=pk_test_PhrQ27ZSmvJI5qcEyFZnllnA

The set environment keys on heroku:

heroku config:set STRIPE_TEST_SECRET_KEY=sk_test_hh22z9yzFJPzBSVDwF6VMJZp

Create payment model:

rails generate model Payment email:string token:string user_id:integer
rake db:migrate

Include the following in the user model:

has_one :payment
accepts_nested_attributes_for :payment

Include the following in the payment model:

attr_accessor :card_number, :card_cvv, :card_expires_month, :card_expires_year

belongs_to :user

def self.month_options
  Date::MONTHNAMES.compact.each_with_index.map { |name, i| ["#{i+1} - #{name}", i+1]}
end

def self.year_options
  (Date.today.year..(Date.today.year+10)).to_a
end
  
def process_payment
  customer = Stripe::Customer.create email: email, card: token

  Stripe::Charge.create customer: customer.id,
                        amount: 1000,
                        description: 'Premium',
                        currency: 'usd'
end

Add fields to sign-up form:

In devise/registrations/new.html.erb include the following before the f.submit:

<%= fields_for(:payment) do |p| %>
  <div class="row col-md-12">
    <div class="form-group col-md-4 no-left-padding">
      <%= p.label :card_number, "Card Number", data: { stripe: 'label'} %>
      <%= p.text_field :card_number, class: "form-control", required: true, data: { stripe: 'number'} %>
    </div>
    <div class="form-group col-md-2">
      <%= p.label :card_cvv, "Card CVV", data: { stripe: 'label'} %>
        <%= p.text_field :card_cvv, class: "form-control", required: true, data: { stripe: 'cvv'} %>
    </div>
    <div class="form-group col-md-6">
      <div class="col-md-12">
        <%= p.label :card_expires, "Card Expires", data: { stripe: 'label'} %>
      </div>
      <div class="col-md-3">
        <%= p.select :card_expires_month, options_for_select(Payment.month_options), 
                      { include_blank: 'Month'},
                      "data-stripe" => "exp-month",
                      class: "form-control", required: true %>
      </div>
      <div class="col-md-3">
        <%= p.select :card_expires_year, options_for_select(Payment.year_options.push), 
                      { include_blank: 'Year'},
                      class: "form-control", 
                       data: { stripe: "exp-year" }, required: true %>
      </div>
    </div>
  </div>
<% end %>

Javascript events for payments handling

In views/layouts/application.html.erb include the following:

<%= javascript_include_tag "https://js.stripe.com/v2/" %>

In views/devise/registrations/new.html.erb include the following at the top:

<script language="Javascript">
  Stripe.setPublishableKey("<%= ENV['STRIPE_TEST_PUBLISHABLE_KEY'] %>");
</script>

Change line to the following:

<%= form_for(resource, :as => resource_name, :url => registration_path(resource_name), html: { role: "form", class: 'cc_form' }) do |f| %>

In app/assets/javascripts create a file called credit_card_form.js and include the following:

$(document).ready(function() {

  var show_error, stripeResponseHandler, submitHandler;

  submitHandler = function (event) {
    var $form = $(event.target);
    $form.find("input[type=submit]").prop("disabled", true);

    //If Stripe was initialized correctly this will create a token using the credit card info
    if(Stripe){
      Stripe.card.createToken($form, stripeResponseHandler);
    } else {
      show_error("Failed to load credit card processing functionality. Please reload this page in your browser.")
    }
    return false;
  };

  $(".cc_form").on('submit', submitHandler);

  stripeResponseHandler = function (status, response) {
    var token, $form;

    $form = $('.cc_form');

    if (response.error) {
      console.log(response.error.message);
      show_error(response.error.message);
      $form.find("input[type=submit]").prop("disabled", false);
    } else {
      token = response.id;
      $form.append($("<input type=\"hidden\" name=\"payment[token]\" />").val(token));
      $("[data-stripe=number]").remove();
      $("[data-stripe=cvv]").remove();
      $("[data-stripe=exp-year]").remove();
      $("[data-stripe=exp-month]").remove();
      $("[data-stripe=label]").remove();
      $form.get(0).submit();
    }
    return false;
  };

  show_error = function (message) {
    if($("#flash-messages").size() < 1){
      $('div.container.main div:first').prepend("<div id='flash-messages'></div>")
    }
    $("#flash-messages").html('<div class="alert alert-warning"><a class="close" data-dismiss="alert">×</a><div id="flash_alert">' + message + '</div></div>');
    $('.alert').delay(5000).fadeOut(3000);  
    return false;
  };
});

Extend devise registrationscontroller. Add ap/controllers/registrations_controller.rb and include the following:

lass RegistrationsController < Devise::RegistrationsController


  def new
  end

  def create
    build_resource(sign_up_params)
    
    resource.class.transaction do
      resource.save
      yield resource if block_given?
      if resource.persisted?
        @payment =Payment.new({ email: params["user"]["email"],
          token: params[:payment]["token"], user_id: resource.id })
        flash[:error] = "Please check registration errors" unless @payment.valid?

        begin
          @payment.process_payment
          @payment.save
        rescue Exception => e
          flash[:error] = e.message

          resource.destroy
          puts 'Payment failed'
          render :new and return
        end

        if resource.active_for_authentication?
          set_flash_message :notice, :signed_up if is_flashing_format?
          sign_up(resource_name, resource)
          respond_with resource, location: after_sign_up_path_for(resource)
        else
          set_flash_message :notice, :"signed_up_but_#{resource.inactive_message}" if is_flashing_format?
          expire_data_after_sign_in!
          respond_with resource, location: after_inactive_sign_up_path_for(resource)
        end
      else
        clean_up_passwords resource
        set_minimum_password_length
        respond_with resource
      end
    end
  end

  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.for(:sign_up).push(:payment)
  end

end

Update the registrations route for devise users in the config/routes.rb file:

devise_for :users, :controllers => { :registrations => 'registrations' }


Issue with turbolinks not working with javascript again, so either remove/disable or have no-turbolinks qualifier:

<%= link_to 'Sign Up', new_user_registration_path, class: 'btn btn-primary sign-up', data: {'no-turbolink' => true} %>

IMAGE UPLOAD

Add the following gems:

gem 'carrierwave'
gem 'mini_magick'
gem 'fog'

Bundle install

rails generate scaffold Image name:string picture:string user:references

rake db:migrate

rails generate bootstrap:themed Images

Update model files:

Add has_many :images to user.rb

rails generate uploader Picture

Add mount_uploader :picture, PictureUploader to image.rb

Add this to start of veiws/images_form.html.erb:

%= form_for @image, :html => { multipart: true, 

In same file change f.text_field line to the following:

<%= f.file_field :picture, accept: 'image/jpeg, image/gif, image/png' %>

In same file remove user_id form-group.

Add following as 2nd line in create action in images_controller.rb

@image.user = current_user

In views/images/show.html.erb remove human_attribute)name for picture, add picture image, and remove user id so final code is:

<dl class="dl-horizontal">
  <dt><strong><%= model_class.human_attribute_name(:name) %>:</strong></dt>
  <dd><%= @image.name %></dd>
  <dt></dt>
  <dd><%= image_tag(@image.picture.url, size: "300x300") if @image.picture? %></dd>
</dl>

Add validations to images. In app/uploaders/picture_uploade.rb uncomment whitelist.

In image model file add:

validate :picture_size

  private
    def picture_size
      if picture.size > 5.megabytes
        errors.add(:picture, "should beless than 5MB")
      end
    end

Add javascript validation to end of _form.html.erb

<script type="text/javascript">
  $('#image_picture').bind('change', function() {
    var size_in_megabytes = this.files[0].size/1024/1024;
    if (size_in_megabytes > 5) {
      alert('Maximum file size is 5MB.');
    }
  });
</script>

Update imagemagick with brew install minimagick

Add picture resizing capability in app/uploaders/picture_uploade.rb uncomment 3rd include and add line:

include CarrierWave::MiniMagick
process resize_to_limit: [300, 300]

Fix images index page to remove id, created at etc. and show image:

<thead>
    <tr>
      <th><%= model_class.human_attribute_name(:name) %></th>
      <th><%= model_class.human_attribute_name(:picture) %></th>
      <th><%=t '.actions', :default => t("helpers.actions") %></th>
    </tr>
  </thead>
  <tbody>
    <% @images.each do |image| %>
      <tr>
        <td><%= link_to image.name, image_path(image) %></td>
        <td><%= image_tag image.picture.url, size: "100x100" %></td>

Handling images in production with Amazon S3:

In picture_uploader.rb allow for use of fog gem in production:

if Rails.env.production?
  storage :fog
else
  storage :file
end

Sign-up for AWS and do IAM configuration.

1) Create IAM user
2) Create S3 bucket
3) Create policy with s3 bucket details
4) Attach policy to IAM user created

Here is a sample policy, replace the code with your s3 bucket name as needed below:

{
  "Version": "2012-10-17",
  "Statement": [
  {
    "Effect": "Allow",
    "Action": "s3:*",
    "Resource": [
    "arn:aws:s3:::yours3bucketname",
    "arn:aws:s3:::yours3bucketname/*"
    ]
  },
  {
    "Effect": "Allow",
    "Action": "s3:ListAllMyBuckets",
    "Resource": "arn:aws:s3:::*"
  }
  ]
}
















